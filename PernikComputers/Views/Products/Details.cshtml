@model PernikComputers.Models.ProductDetailsViewModel

@{
    ViewData["Title"] = "Details";
}

<div class="text-center">
    <div class="d-lg-inline-block align-top" style="margin-right: 50px">
        <img src="@Model.Image" width="400" height="350"/>
    </div>
    <div class="d-lg-inline-block align-top">
        <h2 id="productTitle">
           @Model.Manufacturer - @Model.Model
        </h2>
        <div class="d-lg-inline-block align-top details-item-price">
            <h5>Single price</h5>
            <hr />
            <span id="pricePerProduct">@Model.Price</span>
            <span> lv.</span>
        </div>
        <div class="d-lg-inline-block align-top details-item-price">
            <h5>Total price</h5>
            <hr />
            <span id="totalPrice">@Model.Price</span>
            <span> lv.</span>
        </div>
            @if(Model.Quantity > 0)
            {
                <p>In Stock: @Model.Quantity</p>
            }
            else
            {
                <p class="text-danger">Not Available</p>
            }

        @await Html.PartialAsync("~/Views/Products/_OrderPartialView.cshtml", new OrderCreateBindingModel
   {
       ProductId = Model.Id,
       Category = Model.Category,
       Manufacturer = Model.Manufacturer,
       Model = Model.Model,
       Price = Model.Price.ToString()
   })
    </div>
    <div style="margin-top: 45px">
        <h2>Technical Details</h2>
        <table class="table table-striped">
            <tbody>
                @foreach (var item in Model.Description)
                {
                    var line = item.Split(':');
                <tr>
                    <td>
                        <strong>@line[0]</strong>
                    </td>
                    <td>
                        @line[1]
                    </td>
                </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<script>
    function CalculatePrice(){
        let quantity = parseFloat(document.getElementById('productQuantity').value)
        let pricePerProduct =  parseFloat(document.getElementById('pricePerProduct').textContent)
        document.getElementById('totalPrice').textContent = (quantity * pricePerProduct).toFixed(2)
    }
    document.getElementById('productQuantity').max = @Html.Raw(Json.Serialize(Model.Quantity));
</script>